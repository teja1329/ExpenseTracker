# k8s-expensetracker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: expensetracker
spec:
  replicas: 2
  selector:
    matchLabels: { app: backend }
  template:
    metadata:
      labels: { app: backend }
    spec:
      containers:
        - name: backend
          image: 448522088355.dkr.ecr.ap-south-1.amazonaws.com/expense-tracker-backend:35fa194
          ports:
            - containerPort: 4000
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "4000"
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: app-secrets, key: JWT_SECRET } }
            - name: CORS_ORIGIN
              valueFrom: { secretKeyRef: { name: app-secrets, key: CORS_ORIGIN } }
            - name: APP_ORIGIN
              valueFrom: { secretKeyRef: { name: app-secrets, key: APP_ORIGIN } }
          readinessProbe:
            httpGet: { path: /health, port: 4000 }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /health, port: 4000 }
            initialDelaySeconds: 30
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: expensetracker
spec:
  selector: { app: backend }
  ports:
    - name: http
      port: 4000
      targetPort: 4000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: expensetracker
spec:
  replicas: 2
  selector:
    matchLabels: { app: frontend }
  template:
    metadata:
      labels: { app: frontend }
    spec:
      containers:
        - name: frontend
          image: 448522088355.dkr.ecr.ap-south-1.amazonaws.com/expense-tracker-frontend:35fa194
          ports:
            - containerPort: 80
          env:
            - name: VITE_API_BASE
              value: "/api"
          readinessProbe:
            httpGet: { path: /, port: 80 }
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /, port: 80 }
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: expensetracker
spec:
  selector: { app: frontend }
  ports:
    - name: http
      port: 80
      targetPort: 80
  type: ClusterIP
---
# Ingress: ALB (internet-facing), routes /api -> backend, / -> frontend
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: expensetracker
  namespace: expensetracker
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    # Use your public subnets tagged for ELB; ALB controller finds them via tags
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    # Optional: redirect HTTP->HTTPS if you later add TLS; for now keep HTTP only.
    # alb.ingress.kubernetes.io/actions.ssl-redirect: >
    #   {"Type":"redirect","RedirectConfig":{"Protocol":"HTTPS","Port":"443","StatusCode":"HTTP_301"}}
spec:
  rules:
    - http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 4000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80

