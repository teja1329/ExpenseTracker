apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: expensetracker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-db
          image: public.ecr.aws/docker/library/node:20-alpine
          workingDir: /app
          command:
            - sh
            - -lc
            - |
              set -e
              apk add --no-cache sqlite
              # ensure data dir exists
              mkdir -p /app/data
              # create DB if missing (assumes schema.sql is inside the backend image at /app/schema.sql)
              if [ ! -f /app/data/expense_app.db ]; then
                if [ -f /app/schema.sql ]; then
                  sqlite3 /app/data/expense_app.db < /app/schema.sql
                else
                  echo "ERROR: /app/schema.sql not found in image. Ensure your backend image includes it."
                  exit 1
                fi
              fi
          volumeMounts:
            - name: data
              mountPath: /app/data
      containers:
        - name: backend
          image: 448522088355.dkr.ecr.ap-south-1.amazonaws.com/expense-tracker-backend:saiteja
          imagePullPolicy: Always
          ports:
            - containerPort: 4000
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "4000"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: JWT_SECRET
            - name: CORS_ORIGIN
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: CORS_ORIGIN
            - name: APP_ORIGIN
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: APP_ORIGIN
          volumeMounts:
            - name: data
              mountPath: /app/data
          readinessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 30
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: expensetracker
spec:
  selector:
    app: backend
  ports:
    - name: http
      port: 4000
      targetPort: 4000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: expensetracker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: 448522088355.dkr.ecr.ap-south-1.amazonaws.com/expense-tracker-frontend:saiteja
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          # VITE_API_BASE is used at build time; fine to omit here for nginx runtime
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: expensetracker
spec:
  selector:
    app: frontend
  ports:
    - name: http
      port: 80
      targetPort: 80
  type: ClusterIP
---
# ALB Ingress (internet-facing), routes /api -> backend, / -> frontend
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: expensetracker
  namespace: expensetracker
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 4000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
